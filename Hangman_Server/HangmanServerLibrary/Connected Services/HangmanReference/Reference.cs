//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HangmanServerLibrary.HangmanReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PlayerDTO", Namespace="http://schemas.datacontract.org/2004/07/Hangman_Server.Model")]
    [System.SerializableAttribute()]
    public partial class PlayerDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> BirthdateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdPlayerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] ImgBytesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ImgRouteField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NicknameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PhoneNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ScoreField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool SessionDuplicateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UsernameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> Birthdate {
            get {
                return this.BirthdateField;
            }
            set {
                if ((this.BirthdateField.Equals(value) != true)) {
                    this.BirthdateField = value;
                    this.RaisePropertyChanged("Birthdate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int IdPlayer {
            get {
                return this.IdPlayerField;
            }
            set {
                if ((this.IdPlayerField.Equals(value) != true)) {
                    this.IdPlayerField = value;
                    this.RaisePropertyChanged("IdPlayer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] ImgBytes {
            get {
                return this.ImgBytesField;
            }
            set {
                if ((object.ReferenceEquals(this.ImgBytesField, value) != true)) {
                    this.ImgBytesField = value;
                    this.RaisePropertyChanged("ImgBytes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ImgRoute {
            get {
                return this.ImgRouteField;
            }
            set {
                if ((object.ReferenceEquals(this.ImgRouteField, value) != true)) {
                    this.ImgRouteField = value;
                    this.RaisePropertyChanged("ImgRoute");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Nickname {
            get {
                return this.NicknameField;
            }
            set {
                if ((object.ReferenceEquals(this.NicknameField, value) != true)) {
                    this.NicknameField = value;
                    this.RaisePropertyChanged("Nickname");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PhoneNumber {
            get {
                return this.PhoneNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.PhoneNumberField, value) != true)) {
                    this.PhoneNumberField = value;
                    this.RaisePropertyChanged("PhoneNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Score {
            get {
                return this.ScoreField;
            }
            set {
                if ((this.ScoreField.Equals(value) != true)) {
                    this.ScoreField = value;
                    this.RaisePropertyChanged("Score");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool SessionDuplicate {
            get {
                return this.SessionDuplicateField;
            }
            set {
                if ((this.SessionDuplicateField.Equals(value) != true)) {
                    this.SessionDuplicateField = value;
                    this.RaisePropertyChanged("SessionDuplicate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Username {
            get {
                return this.UsernameField;
            }
            set {
                if ((object.ReferenceEquals(this.UsernameField, value) != true)) {
                    this.UsernameField = value;
                    this.RaisePropertyChanged("Username");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PlayerStatsDTO", Namespace="http://schemas.datacontract.org/2004/07/")]
    [System.SerializableAttribute()]
    public partial class PlayerStatsDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int GamesPlayedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UsernameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int WinsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int GamesPlayed {
            get {
                return this.GamesPlayedField;
            }
            set {
                if ((this.GamesPlayedField.Equals(value) != true)) {
                    this.GamesPlayedField = value;
                    this.RaisePropertyChanged("GamesPlayed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Username {
            get {
                return this.UsernameField;
            }
            set {
                if ((object.ReferenceEquals(this.UsernameField, value) != true)) {
                    this.UsernameField = value;
                    this.RaisePropertyChanged("Username");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Wins {
            get {
                return this.WinsField;
            }
            set {
                if ((this.WinsField.Equals(value) != true)) {
                    this.WinsField = value;
                    this.RaisePropertyChanged("Wins");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="HangmanReference.IHangmanService")]
    public interface IHangmanService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHangmanService/Login", ReplyAction="http://tempuri.org/IHangmanService/LoginResponse")]
        HangmanServerLibrary.HangmanReference.PlayerDTO Login(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHangmanService/Login", ReplyAction="http://tempuri.org/IHangmanService/LoginResponse")]
        System.Threading.Tasks.Task<HangmanServerLibrary.HangmanReference.PlayerDTO> LoginAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHangmanService/RegisterPlayer", ReplyAction="http://tempuri.org/IHangmanService/RegisterPlayerResponse")]
        bool RegisterPlayer(HangmanServerLibrary.HangmanReference.PlayerDTO newPlayer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHangmanService/RegisterPlayer", ReplyAction="http://tempuri.org/IHangmanService/RegisterPlayerResponse")]
        System.Threading.Tasks.Task<bool> RegisterPlayerAsync(HangmanServerLibrary.HangmanReference.PlayerDTO newPlayer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHangmanService/UpdatePlayerProfile", ReplyAction="http://tempuri.org/IHangmanService/UpdatePlayerProfileResponse")]
        bool UpdatePlayerProfile(HangmanServerLibrary.HangmanReference.PlayerDTO player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHangmanService/UpdatePlayerProfile", ReplyAction="http://tempuri.org/IHangmanService/UpdatePlayerProfileResponse")]
        System.Threading.Tasks.Task<bool> UpdatePlayerProfileAsync(HangmanServerLibrary.HangmanReference.PlayerDTO player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHangmanService/GetPlayerStats", ReplyAction="http://tempuri.org/IHangmanService/GetPlayerStatsResponse")]
        HangmanServerLibrary.HangmanReference.PlayerStatsDTO GetPlayerStats(int playerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHangmanService/GetPlayerStats", ReplyAction="http://tempuri.org/IHangmanService/GetPlayerStatsResponse")]
        System.Threading.Tasks.Task<HangmanServerLibrary.HangmanReference.PlayerStatsDTO> GetPlayerStatsAsync(int playerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHangmanService/EmailExiste", ReplyAction="http://tempuri.org/IHangmanService/EmailExisteResponse")]
        bool EmailExiste(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHangmanService/EmailExiste", ReplyAction="http://tempuri.org/IHangmanService/EmailExisteResponse")]
        System.Threading.Tasks.Task<bool> EmailExisteAsync(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHangmanService/PhoneNumberExiste", ReplyAction="http://tempuri.org/IHangmanService/PhoneNumberExisteResponse")]
        bool PhoneNumberExiste(string phoneNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHangmanService/PhoneNumberExiste", ReplyAction="http://tempuri.org/IHangmanService/PhoneNumberExisteResponse")]
        System.Threading.Tasks.Task<bool> PhoneNumberExisteAsync(string phoneNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHangmanService/UsernameExiste", ReplyAction="http://tempuri.org/IHangmanService/UsernameExisteResponse")]
        bool UsernameExiste(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHangmanService/UsernameExiste", ReplyAction="http://tempuri.org/IHangmanService/UsernameExisteResponse")]
        System.Threading.Tasks.Task<bool> UsernameExisteAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHangmanService/NicknameExiste", ReplyAction="http://tempuri.org/IHangmanService/NicknameExisteResponse")]
        bool NicknameExiste(string nickname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHangmanService/NicknameExiste", ReplyAction="http://tempuri.org/IHangmanService/NicknameExisteResponse")]
        System.Threading.Tasks.Task<bool> NicknameExisteAsync(string nickname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHangmanService/Logout", ReplyAction="http://tempuri.org/IHangmanService/LogoutResponse")]
        void Logout(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHangmanService/Logout", ReplyAction="http://tempuri.org/IHangmanService/LogoutResponse")]
        System.Threading.Tasks.Task LogoutAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHangmanService/ObtenerHistorialPartidas", ReplyAction="http://tempuri.org/IHangmanService/ObtenerHistorialPartidasResponse")]
        string[] ObtenerHistorialPartidas(int playerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHangmanService/ObtenerHistorialPartidas", ReplyAction="http://tempuri.org/IHangmanService/ObtenerHistorialPartidasResponse")]
        System.Threading.Tasks.Task<string[]> ObtenerHistorialPartidasAsync(int playerId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IHangmanServiceChannel : HangmanServerLibrary.HangmanReference.IHangmanService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class HangmanServiceClient : System.ServiceModel.ClientBase<HangmanServerLibrary.HangmanReference.IHangmanService>, HangmanServerLibrary.HangmanReference.IHangmanService {
        
        public HangmanServiceClient() {
        }
        
        public HangmanServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public HangmanServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public HangmanServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public HangmanServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public HangmanServerLibrary.HangmanReference.PlayerDTO Login(string username, string password) {
            return base.Channel.Login(username, password);
        }
        
        public System.Threading.Tasks.Task<HangmanServerLibrary.HangmanReference.PlayerDTO> LoginAsync(string username, string password) {
            return base.Channel.LoginAsync(username, password);
        }
        
        public bool RegisterPlayer(HangmanServerLibrary.HangmanReference.PlayerDTO newPlayer) {
            return base.Channel.RegisterPlayer(newPlayer);
        }
        
        public System.Threading.Tasks.Task<bool> RegisterPlayerAsync(HangmanServerLibrary.HangmanReference.PlayerDTO newPlayer) {
            return base.Channel.RegisterPlayerAsync(newPlayer);
        }
        
        public bool UpdatePlayerProfile(HangmanServerLibrary.HangmanReference.PlayerDTO player) {
            return base.Channel.UpdatePlayerProfile(player);
        }
        
        public System.Threading.Tasks.Task<bool> UpdatePlayerProfileAsync(HangmanServerLibrary.HangmanReference.PlayerDTO player) {
            return base.Channel.UpdatePlayerProfileAsync(player);
        }
        
        public HangmanServerLibrary.HangmanReference.PlayerStatsDTO GetPlayerStats(int playerId) {
            return base.Channel.GetPlayerStats(playerId);
        }
        
        public System.Threading.Tasks.Task<HangmanServerLibrary.HangmanReference.PlayerStatsDTO> GetPlayerStatsAsync(int playerId) {
            return base.Channel.GetPlayerStatsAsync(playerId);
        }
        
        public bool EmailExiste(string email) {
            return base.Channel.EmailExiste(email);
        }
        
        public System.Threading.Tasks.Task<bool> EmailExisteAsync(string email) {
            return base.Channel.EmailExisteAsync(email);
        }
        
        public bool PhoneNumberExiste(string phoneNumber) {
            return base.Channel.PhoneNumberExiste(phoneNumber);
        }
        
        public System.Threading.Tasks.Task<bool> PhoneNumberExisteAsync(string phoneNumber) {
            return base.Channel.PhoneNumberExisteAsync(phoneNumber);
        }
        
        public bool UsernameExiste(string username) {
            return base.Channel.UsernameExiste(username);
        }
        
        public System.Threading.Tasks.Task<bool> UsernameExisteAsync(string username) {
            return base.Channel.UsernameExisteAsync(username);
        }
        
        public bool NicknameExiste(string nickname) {
            return base.Channel.NicknameExiste(nickname);
        }
        
        public System.Threading.Tasks.Task<bool> NicknameExisteAsync(string nickname) {
            return base.Channel.NicknameExisteAsync(nickname);
        }
        
        public void Logout(string username) {
            base.Channel.Logout(username);
        }
        
        public System.Threading.Tasks.Task LogoutAsync(string username) {
            return base.Channel.LogoutAsync(username);
        }
        
        public string[] ObtenerHistorialPartidas(int playerId) {
            return base.Channel.ObtenerHistorialPartidas(playerId);
        }
        
        public System.Threading.Tasks.Task<string[]> ObtenerHistorialPartidasAsync(int playerId) {
            return base.Channel.ObtenerHistorialPartidasAsync(playerId);
        }
    }
}
