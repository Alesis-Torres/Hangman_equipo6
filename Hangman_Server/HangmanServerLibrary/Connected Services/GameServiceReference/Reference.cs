//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HangmanServerLibrary.GameServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WordDTO", Namespace="http://schemas.datacontract.org/2004/07/Hangman_Server.Model.DTO")]
    [System.SerializableAttribute()]
    public partial class WordDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] ImageBytesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] ImageBytes {
            get {
                return this.ImageBytesField;
            }
            set {
                if ((object.ReferenceEquals(this.ImageBytesField, value) != true)) {
                    this.ImageBytesField = value;
                    this.RaisePropertyChanged("ImageBytes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CategoryDTO", Namespace="http://schemas.datacontract.org/2004/07/Hangman_Server.Model.DTO")]
    [System.SerializableAttribute()]
    public partial class CategoryDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] ImageBytesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] ImageBytes {
            get {
                return this.ImageBytesField;
            }
            set {
                if ((object.ReferenceEquals(this.ImageBytesField, value) != true)) {
                    this.ImageBytesField = value;
                    this.RaisePropertyChanged("ImageBytes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="GameServiceReference.IGameService")]
    public interface IGameService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/RechazarLetra", ReplyAction="http://tempuri.org/IGameService/RechazarLetraResponse")]
        string RechazarLetra(int salaId, string letra);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/RechazarLetra", ReplyAction="http://tempuri.org/IGameService/RechazarLetraResponse")]
        System.Threading.Tasks.Task<string> RechazarLetraAsync(int salaId, string letra);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/CrearSala", ReplyAction="http://tempuri.org/IGameService/CrearSalaResponse")]
        int CrearSala(string nombreJugador, int idCliente);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/CrearSala", ReplyAction="http://tempuri.org/IGameService/CrearSalaResponse")]
        System.Threading.Tasks.Task<int> CrearSalaAsync(string nombreJugador, int idCliente);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/CrearSalaV2", ReplyAction="http://tempuri.org/IGameService/CrearSalaV2Response")]
        int CrearSalaV2(string nombreJugador, int idCliente);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/CrearSalaV2", ReplyAction="http://tempuri.org/IGameService/CrearSalaV2Response")]
        System.Threading.Tasks.Task<int> CrearSalaV2Async(string nombreJugador, int idCliente);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/ObtenerSalaIdPorCodigo", ReplyAction="http://tempuri.org/IGameService/ObtenerSalaIdPorCodigoResponse")]
        int ObtenerSalaIdPorCodigo(string codigo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/ObtenerSalaIdPorCodigo", ReplyAction="http://tempuri.org/IGameService/ObtenerSalaIdPorCodigoResponse")]
        System.Threading.Tasks.Task<int> ObtenerSalaIdPorCodigoAsync(string codigo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/UnirseSala", ReplyAction="http://tempuri.org/IGameService/UnirseSalaResponse")]
        string UnirseSala(int salaId, string nombreJugador, int idPlayerGuesser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/UnirseSala", ReplyAction="http://tempuri.org/IGameService/UnirseSalaResponse")]
        System.Threading.Tasks.Task<string> UnirseSalaAsync(int salaId, string nombreJugador, int idPlayerGuesser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/Salir", ReplyAction="http://tempuri.org/IGameService/SalirResponse")]
        void Salir(int salaId, string nombreJugador);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/Salir", ReplyAction="http://tempuri.org/IGameService/SalirResponse")]
        System.Threading.Tasks.Task SalirAsync(int salaId, string nombreJugador);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/ObtenerPalabraPorSala", ReplyAction="http://tempuri.org/IGameService/ObtenerPalabraPorSalaResponse")]
        string ObtenerPalabraPorSala(int salaId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/ObtenerPalabraPorSala", ReplyAction="http://tempuri.org/IGameService/ObtenerPalabraPorSalaResponse")]
        System.Threading.Tasks.Task<string> ObtenerPalabraPorSalaAsync(int salaId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/ObtenerCodigoDeSala", ReplyAction="http://tempuri.org/IGameService/ObtenerCodigoDeSalaResponse")]
        string ObtenerCodigoDeSala(int salaId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/ObtenerCodigoDeSala", ReplyAction="http://tempuri.org/IGameService/ObtenerCodigoDeSalaResponse")]
        System.Threading.Tasks.Task<string> ObtenerCodigoDeSalaAsync(int salaId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/EsPartidaTerminada", ReplyAction="http://tempuri.org/IGameService/EsPartidaTerminadaResponse")]
        bool EsPartidaTerminada(int salaId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/EsPartidaTerminada", ReplyAction="http://tempuri.org/IGameService/EsPartidaTerminadaResponse")]
        System.Threading.Tasks.Task<bool> EsPartidaTerminadaAsync(int salaId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/ProbarConexion", ReplyAction="http://tempuri.org/IGameService/ProbarConexionResponse")]
        string ProbarConexion();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/ProbarConexion", ReplyAction="http://tempuri.org/IGameService/ProbarConexionResponse")]
        System.Threading.Tasks.Task<string> ProbarConexionAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/ObtenerSalas", ReplyAction="http://tempuri.org/IGameService/ObtenerSalasResponse")]
        string ObtenerSalas();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/ObtenerSalas", ReplyAction="http://tempuri.org/IGameService/ObtenerSalasResponse")]
        System.Threading.Tasks.Task<string> ObtenerSalasAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/ObtenerEstadoPalabra", ReplyAction="http://tempuri.org/IGameService/ObtenerEstadoPalabraResponse")]
        string ObtenerEstadoPalabra(int salaId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/ObtenerEstadoPalabra", ReplyAction="http://tempuri.org/IGameService/ObtenerEstadoPalabraResponse")]
        System.Threading.Tasks.Task<string> ObtenerEstadoPalabraAsync(int salaId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/ObtenerIntentosRestantes", ReplyAction="http://tempuri.org/IGameService/ObtenerIntentosRestantesResponse")]
        int ObtenerIntentosRestantes(int salaId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/ObtenerIntentosRestantes", ReplyAction="http://tempuri.org/IGameService/ObtenerIntentosRestantesResponse")]
        System.Threading.Tasks.Task<int> ObtenerIntentosRestantesAsync(int salaId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/ObtenerLetraPropuesta", ReplyAction="http://tempuri.org/IGameService/ObtenerLetraPropuestaResponse")]
        string ObtenerLetraPropuesta(int salaId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/ObtenerLetraPropuesta", ReplyAction="http://tempuri.org/IGameService/ObtenerLetraPropuestaResponse")]
        System.Threading.Tasks.Task<string> ObtenerLetraPropuestaAsync(int salaId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/EnviarLetra", ReplyAction="http://tempuri.org/IGameService/EnviarLetraResponse")]
        void EnviarLetra(int salaId, string letra);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/EnviarLetra", ReplyAction="http://tempuri.org/IGameService/EnviarLetraResponse")]
        System.Threading.Tasks.Task EnviarLetraAsync(int salaId, string letra);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/ConfirmarLetra", ReplyAction="http://tempuri.org/IGameService/ConfirmarLetraResponse")]
        string ConfirmarLetra(int salaId, string letra);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/ConfirmarLetra", ReplyAction="http://tempuri.org/IGameService/ConfirmarLetraResponse")]
        System.Threading.Tasks.Task<string> ConfirmarLetraAsync(int salaId, string letra);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/AgregarJugador", ReplyAction="http://tempuri.org/IGameService/AgregarJugadorResponse")]
        string AgregarJugador(int salaId, string nombreJugador);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/AgregarJugador", ReplyAction="http://tempuri.org/IGameService/AgregarJugadorResponse")]
        System.Threading.Tasks.Task<string> AgregarJugadorAsync(int salaId, string nombreJugador);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/ObtenerJugadoresEnSala", ReplyAction="http://tempuri.org/IGameService/ObtenerJugadoresEnSalaResponse")]
        int ObtenerJugadoresEnSala(int salaId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/ObtenerJugadoresEnSala", ReplyAction="http://tempuri.org/IGameService/ObtenerJugadoresEnSalaResponse")]
        System.Threading.Tasks.Task<int> ObtenerJugadoresEnSalaAsync(int salaId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/RegistrarPartidaInconclusa", ReplyAction="http://tempuri.org/IGameService/RegistrarPartidaInconclusaResponse")]
        void RegistrarPartidaInconclusa(int salaId, int idChallenger, int idGuesser, int idPalabra, int idDesconectado, string codigoSala);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/RegistrarPartidaInconclusa", ReplyAction="http://tempuri.org/IGameService/RegistrarPartidaInconclusaResponse")]
        System.Threading.Tasks.Task RegistrarPartidaInconclusaAsync(int salaId, int idChallenger, int idGuesser, int idPalabra, int idDesconectado, string codigoSala);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/RegistrarPartidaFinalizada", ReplyAction="http://tempuri.org/IGameService/RegistrarPartidaFinalizadaResponse")]
        int RegistrarPartidaFinalizada(int idChallenger, int idGuesser, int idPalabra, int idEstado, int idJugadorGanador);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/RegistrarPartidaFinalizada", ReplyAction="http://tempuri.org/IGameService/RegistrarPartidaFinalizadaResponse")]
        System.Threading.Tasks.Task<int> RegistrarPartidaFinalizadaAsync(int idChallenger, int idGuesser, int idPalabra, int idEstado, int idJugadorGanador);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/EstablecerPalabra", ReplyAction="http://tempuri.org/IGameService/EstablecerPalabraResponse")]
        int EstablecerPalabra(int idSala, string palabra);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/EstablecerPalabra", ReplyAction="http://tempuri.org/IGameService/EstablecerPalabraResponse")]
        System.Threading.Tasks.Task<int> EstablecerPalabraAsync(int idSala, string palabra);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/ObtenerIdGuesser", ReplyAction="http://tempuri.org/IGameService/ObtenerIdGuesserResponse")]
        int ObtenerIdGuesser(int salaId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/ObtenerIdGuesser", ReplyAction="http://tempuri.org/IGameService/ObtenerIdGuesserResponse")]
        System.Threading.Tasks.Task<int> ObtenerIdGuesserAsync(int salaId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/ObtenerIdWord", ReplyAction="http://tempuri.org/IGameService/ObtenerIdWordResponse")]
        int ObtenerIdWord(int salaId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/ObtenerIdWord", ReplyAction="http://tempuri.org/IGameService/ObtenerIdWordResponse")]
        System.Threading.Tasks.Task<int> ObtenerIdWordAsync(int salaId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/ObtenerJugadoresEnPartida", ReplyAction="http://tempuri.org/IGameService/ObtenerJugadoresEnPartidaResponse")]
        string[] ObtenerJugadoresEnPartida(int salaId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/ObtenerJugadoresEnPartida", ReplyAction="http://tempuri.org/IGameService/ObtenerJugadoresEnPartidaResponse")]
        System.Threading.Tasks.Task<string[]> ObtenerJugadoresEnPartidaAsync(int salaId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/ObtenerPalabrasPorCategoria", ReplyAction="http://tempuri.org/IGameService/ObtenerPalabrasPorCategoriaResponse")]
        HangmanServerLibrary.GameServiceReference.WordDTO[] ObtenerPalabrasPorCategoria(string categoria, int idLenguaje);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/ObtenerPalabrasPorCategoria", ReplyAction="http://tempuri.org/IGameService/ObtenerPalabrasPorCategoriaResponse")]
        System.Threading.Tasks.Task<HangmanServerLibrary.GameServiceReference.WordDTO[]> ObtenerPalabrasPorCategoriaAsync(string categoria, int idLenguaje);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/ObtenerCategorias", ReplyAction="http://tempuri.org/IGameService/ObtenerCategoriasResponse")]
        HangmanServerLibrary.GameServiceReference.CategoryDTO[] ObtenerCategorias(int idLenguaje);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/ObtenerCategorias", ReplyAction="http://tempuri.org/IGameService/ObtenerCategoriasResponse")]
        System.Threading.Tasks.Task<HangmanServerLibrary.GameServiceReference.CategoryDTO[]> ObtenerCategoriasAsync(int idLenguaje);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGameServiceChannel : HangmanServerLibrary.GameServiceReference.IGameService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GameServiceClient : System.ServiceModel.ClientBase<HangmanServerLibrary.GameServiceReference.IGameService>, HangmanServerLibrary.GameServiceReference.IGameService {
        
        public GameServiceClient() {
        }
        
        public GameServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public GameServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public GameServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public GameServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string RechazarLetra(int salaId, string letra) {
            return base.Channel.RechazarLetra(salaId, letra);
        }
        
        public System.Threading.Tasks.Task<string> RechazarLetraAsync(int salaId, string letra) {
            return base.Channel.RechazarLetraAsync(salaId, letra);
        }
        
        public int CrearSala(string nombreJugador, int idCliente) {
            return base.Channel.CrearSala(nombreJugador, idCliente);
        }
        
        public System.Threading.Tasks.Task<int> CrearSalaAsync(string nombreJugador, int idCliente) {
            return base.Channel.CrearSalaAsync(nombreJugador, idCliente);
        }
        
        public int CrearSalaV2(string nombreJugador, int idCliente) {
            return base.Channel.CrearSalaV2(nombreJugador, idCliente);
        }
        
        public System.Threading.Tasks.Task<int> CrearSalaV2Async(string nombreJugador, int idCliente) {
            return base.Channel.CrearSalaV2Async(nombreJugador, idCliente);
        }
        
        public int ObtenerSalaIdPorCodigo(string codigo) {
            return base.Channel.ObtenerSalaIdPorCodigo(codigo);
        }
        
        public System.Threading.Tasks.Task<int> ObtenerSalaIdPorCodigoAsync(string codigo) {
            return base.Channel.ObtenerSalaIdPorCodigoAsync(codigo);
        }
        
        public string UnirseSala(int salaId, string nombreJugador, int idPlayerGuesser) {
            return base.Channel.UnirseSala(salaId, nombreJugador, idPlayerGuesser);
        }
        
        public System.Threading.Tasks.Task<string> UnirseSalaAsync(int salaId, string nombreJugador, int idPlayerGuesser) {
            return base.Channel.UnirseSalaAsync(salaId, nombreJugador, idPlayerGuesser);
        }
        
        public void Salir(int salaId, string nombreJugador) {
            base.Channel.Salir(salaId, nombreJugador);
        }
        
        public System.Threading.Tasks.Task SalirAsync(int salaId, string nombreJugador) {
            return base.Channel.SalirAsync(salaId, nombreJugador);
        }
        
        public string ObtenerPalabraPorSala(int salaId) {
            return base.Channel.ObtenerPalabraPorSala(salaId);
        }
        
        public System.Threading.Tasks.Task<string> ObtenerPalabraPorSalaAsync(int salaId) {
            return base.Channel.ObtenerPalabraPorSalaAsync(salaId);
        }
        
        public string ObtenerCodigoDeSala(int salaId) {
            return base.Channel.ObtenerCodigoDeSala(salaId);
        }
        
        public System.Threading.Tasks.Task<string> ObtenerCodigoDeSalaAsync(int salaId) {
            return base.Channel.ObtenerCodigoDeSalaAsync(salaId);
        }
        
        public bool EsPartidaTerminada(int salaId) {
            return base.Channel.EsPartidaTerminada(salaId);
        }
        
        public System.Threading.Tasks.Task<bool> EsPartidaTerminadaAsync(int salaId) {
            return base.Channel.EsPartidaTerminadaAsync(salaId);
        }
        
        public string ProbarConexion() {
            return base.Channel.ProbarConexion();
        }
        
        public System.Threading.Tasks.Task<string> ProbarConexionAsync() {
            return base.Channel.ProbarConexionAsync();
        }
        
        public string ObtenerSalas() {
            return base.Channel.ObtenerSalas();
        }
        
        public System.Threading.Tasks.Task<string> ObtenerSalasAsync() {
            return base.Channel.ObtenerSalasAsync();
        }
        
        public string ObtenerEstadoPalabra(int salaId) {
            return base.Channel.ObtenerEstadoPalabra(salaId);
        }
        
        public System.Threading.Tasks.Task<string> ObtenerEstadoPalabraAsync(int salaId) {
            return base.Channel.ObtenerEstadoPalabraAsync(salaId);
        }
        
        public int ObtenerIntentosRestantes(int salaId) {
            return base.Channel.ObtenerIntentosRestantes(salaId);
        }
        
        public System.Threading.Tasks.Task<int> ObtenerIntentosRestantesAsync(int salaId) {
            return base.Channel.ObtenerIntentosRestantesAsync(salaId);
        }
        
        public string ObtenerLetraPropuesta(int salaId) {
            return base.Channel.ObtenerLetraPropuesta(salaId);
        }
        
        public System.Threading.Tasks.Task<string> ObtenerLetraPropuestaAsync(int salaId) {
            return base.Channel.ObtenerLetraPropuestaAsync(salaId);
        }
        
        public void EnviarLetra(int salaId, string letra) {
            base.Channel.EnviarLetra(salaId, letra);
        }
        
        public System.Threading.Tasks.Task EnviarLetraAsync(int salaId, string letra) {
            return base.Channel.EnviarLetraAsync(salaId, letra);
        }
        
        public string ConfirmarLetra(int salaId, string letra) {
            return base.Channel.ConfirmarLetra(salaId, letra);
        }
        
        public System.Threading.Tasks.Task<string> ConfirmarLetraAsync(int salaId, string letra) {
            return base.Channel.ConfirmarLetraAsync(salaId, letra);
        }
        
        public string AgregarJugador(int salaId, string nombreJugador) {
            return base.Channel.AgregarJugador(salaId, nombreJugador);
        }
        
        public System.Threading.Tasks.Task<string> AgregarJugadorAsync(int salaId, string nombreJugador) {
            return base.Channel.AgregarJugadorAsync(salaId, nombreJugador);
        }
        
        public int ObtenerJugadoresEnSala(int salaId) {
            return base.Channel.ObtenerJugadoresEnSala(salaId);
        }
        
        public System.Threading.Tasks.Task<int> ObtenerJugadoresEnSalaAsync(int salaId) {
            return base.Channel.ObtenerJugadoresEnSalaAsync(salaId);
        }
        
        public void RegistrarPartidaInconclusa(int salaId, int idChallenger, int idGuesser, int idPalabra, int idDesconectado, string codigoSala) {
            base.Channel.RegistrarPartidaInconclusa(salaId, idChallenger, idGuesser, idPalabra, idDesconectado, codigoSala);
        }
        
        public System.Threading.Tasks.Task RegistrarPartidaInconclusaAsync(int salaId, int idChallenger, int idGuesser, int idPalabra, int idDesconectado, string codigoSala) {
            return base.Channel.RegistrarPartidaInconclusaAsync(salaId, idChallenger, idGuesser, idPalabra, idDesconectado, codigoSala);
        }
        
        public int RegistrarPartidaFinalizada(int idChallenger, int idGuesser, int idPalabra, int idEstado, int idJugadorGanador) {
            return base.Channel.RegistrarPartidaFinalizada(idChallenger, idGuesser, idPalabra, idEstado, idJugadorGanador);
        }
        
        public System.Threading.Tasks.Task<int> RegistrarPartidaFinalizadaAsync(int idChallenger, int idGuesser, int idPalabra, int idEstado, int idJugadorGanador) {
            return base.Channel.RegistrarPartidaFinalizadaAsync(idChallenger, idGuesser, idPalabra, idEstado, idJugadorGanador);
        }
        
        public int EstablecerPalabra(int idSala, string palabra) {
            return base.Channel.EstablecerPalabra(idSala, palabra);
        }
        
        public System.Threading.Tasks.Task<int> EstablecerPalabraAsync(int idSala, string palabra) {
            return base.Channel.EstablecerPalabraAsync(idSala, palabra);
        }
        
        public int ObtenerIdGuesser(int salaId) {
            return base.Channel.ObtenerIdGuesser(salaId);
        }
        
        public System.Threading.Tasks.Task<int> ObtenerIdGuesserAsync(int salaId) {
            return base.Channel.ObtenerIdGuesserAsync(salaId);
        }
        
        public int ObtenerIdWord(int salaId) {
            return base.Channel.ObtenerIdWord(salaId);
        }
        
        public System.Threading.Tasks.Task<int> ObtenerIdWordAsync(int salaId) {
            return base.Channel.ObtenerIdWordAsync(salaId);
        }
        
        public string[] ObtenerJugadoresEnPartida(int salaId) {
            return base.Channel.ObtenerJugadoresEnPartida(salaId);
        }
        
        public System.Threading.Tasks.Task<string[]> ObtenerJugadoresEnPartidaAsync(int salaId) {
            return base.Channel.ObtenerJugadoresEnPartidaAsync(salaId);
        }
        
        public HangmanServerLibrary.GameServiceReference.WordDTO[] ObtenerPalabrasPorCategoria(string categoria, int idLenguaje) {
            return base.Channel.ObtenerPalabrasPorCategoria(categoria, idLenguaje);
        }
        
        public System.Threading.Tasks.Task<HangmanServerLibrary.GameServiceReference.WordDTO[]> ObtenerPalabrasPorCategoriaAsync(string categoria, int idLenguaje) {
            return base.Channel.ObtenerPalabrasPorCategoriaAsync(categoria, idLenguaje);
        }
        
        public HangmanServerLibrary.GameServiceReference.CategoryDTO[] ObtenerCategorias(int idLenguaje) {
            return base.Channel.ObtenerCategorias(idLenguaje);
        }
        
        public System.Threading.Tasks.Task<HangmanServerLibrary.GameServiceReference.CategoryDTO[]> ObtenerCategoriasAsync(int idLenguaje) {
            return base.Channel.ObtenerCategoriasAsync(idLenguaje);
        }
    }
}
