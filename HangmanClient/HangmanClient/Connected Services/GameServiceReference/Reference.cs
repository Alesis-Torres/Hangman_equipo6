//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GameServiceReference
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="GameServiceReference.IGameService")]
    public interface IGameService
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/RechazarLetra", ReplyAction="http://tempuri.org/IGameService/RechazarLetraResponse")]
        string RechazarLetra(int salaId, string letra);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/RechazarLetra", ReplyAction="http://tempuri.org/IGameService/RechazarLetraResponse")]
        System.Threading.Tasks.Task<string> RechazarLetraAsync(int salaId, string letra);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/CrearSala", ReplyAction="http://tempuri.org/IGameService/CrearSalaResponse")]
        string CrearSala(string nombreJugador);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/CrearSala", ReplyAction="http://tempuri.org/IGameService/CrearSalaResponse")]
        System.Threading.Tasks.Task<string> CrearSalaAsync(string nombreJugador);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/UnirseSala", ReplyAction="http://tempuri.org/IGameService/UnirseSalaResponse")]
        string UnirseSala(int salaId, string nombreJugador);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/UnirseSala", ReplyAction="http://tempuri.org/IGameService/UnirseSalaResponse")]
        System.Threading.Tasks.Task<string> UnirseSalaAsync(int salaId, string nombreJugador);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/Salir", ReplyAction="http://tempuri.org/IGameService/SalirResponse")]
        void Salir(int salaId, string nombreJugador);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/Salir", ReplyAction="http://tempuri.org/IGameService/SalirResponse")]
        System.Threading.Tasks.Task SalirAsync(int salaId, string nombreJugador);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/EsPartidaTerminada", ReplyAction="http://tempuri.org/IGameService/EsPartidaTerminadaResponse")]
        bool EsPartidaTerminada(int salaId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/EsPartidaTerminada", ReplyAction="http://tempuri.org/IGameService/EsPartidaTerminadaResponse")]
        System.Threading.Tasks.Task<bool> EsPartidaTerminadaAsync(int salaId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/ProbarConexion", ReplyAction="http://tempuri.org/IGameService/ProbarConexionResponse")]
        string ProbarConexion();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/ProbarConexion", ReplyAction="http://tempuri.org/IGameService/ProbarConexionResponse")]
        System.Threading.Tasks.Task<string> ProbarConexionAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/ObtenerSalas", ReplyAction="http://tempuri.org/IGameService/ObtenerSalasResponse")]
        string ObtenerSalas();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/ObtenerSalas", ReplyAction="http://tempuri.org/IGameService/ObtenerSalasResponse")]
        System.Threading.Tasks.Task<string> ObtenerSalasAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/ObtenerEstadoPalabra", ReplyAction="http://tempuri.org/IGameService/ObtenerEstadoPalabraResponse")]
        string ObtenerEstadoPalabra(int salaId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/ObtenerEstadoPalabra", ReplyAction="http://tempuri.org/IGameService/ObtenerEstadoPalabraResponse")]
        System.Threading.Tasks.Task<string> ObtenerEstadoPalabraAsync(int salaId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/ObtenerIntentosRestantes", ReplyAction="http://tempuri.org/IGameService/ObtenerIntentosRestantesResponse")]
        int ObtenerIntentosRestantes(int salaId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/ObtenerIntentosRestantes", ReplyAction="http://tempuri.org/IGameService/ObtenerIntentosRestantesResponse")]
        System.Threading.Tasks.Task<int> ObtenerIntentosRestantesAsync(int salaId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/ObtenerLetraPropuesta", ReplyAction="http://tempuri.org/IGameService/ObtenerLetraPropuestaResponse")]
        string ObtenerLetraPropuesta(int salaId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/ObtenerLetraPropuesta", ReplyAction="http://tempuri.org/IGameService/ObtenerLetraPropuestaResponse")]
        System.Threading.Tasks.Task<string> ObtenerLetraPropuestaAsync(int salaId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/EnviarLetra", ReplyAction="http://tempuri.org/IGameService/EnviarLetraResponse")]
        void EnviarLetra(int salaId, string letra);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/EnviarLetra", ReplyAction="http://tempuri.org/IGameService/EnviarLetraResponse")]
        System.Threading.Tasks.Task EnviarLetraAsync(int salaId, string letra);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/ConfirmarLetra", ReplyAction="http://tempuri.org/IGameService/ConfirmarLetraResponse")]
        string ConfirmarLetra(int salaId, string letra);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/ConfirmarLetra", ReplyAction="http://tempuri.org/IGameService/ConfirmarLetraResponse")]
        System.Threading.Tasks.Task<string> ConfirmarLetraAsync(int salaId, string letra);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/AgregarJugador", ReplyAction="http://tempuri.org/IGameService/AgregarJugadorResponse")]
        string AgregarJugador(int salaId, string nombreJugador);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/AgregarJugador", ReplyAction="http://tempuri.org/IGameService/AgregarJugadorResponse")]
        System.Threading.Tasks.Task<string> AgregarJugadorAsync(int salaId, string nombreJugador);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/ObtenerJugadoresEnSala", ReplyAction="http://tempuri.org/IGameService/ObtenerJugadoresEnSalaResponse")]
        int ObtenerJugadoresEnSala(int salaId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/ObtenerJugadoresEnSala", ReplyAction="http://tempuri.org/IGameService/ObtenerJugadoresEnSalaResponse")]
        System.Threading.Tasks.Task<int> ObtenerJugadoresEnSalaAsync(int salaId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    public interface IGameServiceChannel : GameServiceReference.IGameService, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    public partial class GameServiceClient : System.ServiceModel.ClientBase<GameServiceReference.IGameService>, GameServiceReference.IGameService
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public GameServiceClient() : 
                base(GameServiceClient.GetDefaultBinding(), GameServiceClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IGameService.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public GameServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(GameServiceClient.GetBindingForEndpoint(endpointConfiguration), GameServiceClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public GameServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(GameServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public GameServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(GameServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public GameServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public string RechazarLetra(int salaId, string letra)
        {
            return base.Channel.RechazarLetra(salaId, letra);
        }
        
        public System.Threading.Tasks.Task<string> RechazarLetraAsync(int salaId, string letra)
        {
            return base.Channel.RechazarLetraAsync(salaId, letra);
        }
        
        public string CrearSala(string nombreJugador)
        {
            return base.Channel.CrearSala(nombreJugador);
        }
        
        public System.Threading.Tasks.Task<string> CrearSalaAsync(string nombreJugador)
        {
            return base.Channel.CrearSalaAsync(nombreJugador);
        }
        
        public string UnirseSala(int salaId, string nombreJugador)
        {
            return base.Channel.UnirseSala(salaId, nombreJugador);
        }
        
        public System.Threading.Tasks.Task<string> UnirseSalaAsync(int salaId, string nombreJugador)
        {
            return base.Channel.UnirseSalaAsync(salaId, nombreJugador);
        }
        
        public void Salir(int salaId, string nombreJugador)
        {
            base.Channel.Salir(salaId, nombreJugador);
        }
        
        public System.Threading.Tasks.Task SalirAsync(int salaId, string nombreJugador)
        {
            return base.Channel.SalirAsync(salaId, nombreJugador);
        }
        
        public bool EsPartidaTerminada(int salaId)
        {
            return base.Channel.EsPartidaTerminada(salaId);
        }
        
        public System.Threading.Tasks.Task<bool> EsPartidaTerminadaAsync(int salaId)
        {
            return base.Channel.EsPartidaTerminadaAsync(salaId);
        }
        
        public string ProbarConexion()
        {
            return base.Channel.ProbarConexion();
        }
        
        public System.Threading.Tasks.Task<string> ProbarConexionAsync()
        {
            return base.Channel.ProbarConexionAsync();
        }
        
        public string ObtenerSalas()
        {
            return base.Channel.ObtenerSalas();
        }
        
        public System.Threading.Tasks.Task<string> ObtenerSalasAsync()
        {
            return base.Channel.ObtenerSalasAsync();
        }
        
        public string ObtenerEstadoPalabra(int salaId)
        {
            return base.Channel.ObtenerEstadoPalabra(salaId);
        }
        
        public System.Threading.Tasks.Task<string> ObtenerEstadoPalabraAsync(int salaId)
        {
            return base.Channel.ObtenerEstadoPalabraAsync(salaId);
        }
        
        public int ObtenerIntentosRestantes(int salaId)
        {
            return base.Channel.ObtenerIntentosRestantes(salaId);
        }
        
        public System.Threading.Tasks.Task<int> ObtenerIntentosRestantesAsync(int salaId)
        {
            return base.Channel.ObtenerIntentosRestantesAsync(salaId);
        }
        
        public string ObtenerLetraPropuesta(int salaId)
        {
            return base.Channel.ObtenerLetraPropuesta(salaId);
        }
        
        public System.Threading.Tasks.Task<string> ObtenerLetraPropuestaAsync(int salaId)
        {
            return base.Channel.ObtenerLetraPropuestaAsync(salaId);
        }
        
        public void EnviarLetra(int salaId, string letra)
        {
            base.Channel.EnviarLetra(salaId, letra);
        }
        
        public System.Threading.Tasks.Task EnviarLetraAsync(int salaId, string letra)
        {
            return base.Channel.EnviarLetraAsync(salaId, letra);
        }
        
        public string ConfirmarLetra(int salaId, string letra)
        {
            return base.Channel.ConfirmarLetra(salaId, letra);
        }
        
        public System.Threading.Tasks.Task<string> ConfirmarLetraAsync(int salaId, string letra)
        {
            return base.Channel.ConfirmarLetraAsync(salaId, letra);
        }
        
        public string AgregarJugador(int salaId, string nombreJugador)
        {
            return base.Channel.AgregarJugador(salaId, nombreJugador);
        }
        
        public System.Threading.Tasks.Task<string> AgregarJugadorAsync(int salaId, string nombreJugador)
        {
            return base.Channel.AgregarJugadorAsync(salaId, nombreJugador);
        }
        
        public int ObtenerJugadoresEnSala(int salaId)
        {
            return base.Channel.ObtenerJugadoresEnSala(salaId);
        }
        
        public System.Threading.Tasks.Task<int> ObtenerJugadoresEnSalaAsync(int salaId)
        {
            return base.Channel.ObtenerJugadoresEnSalaAsync(salaId);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IGameService))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IGameService))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:64520/GameService.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return GameServiceClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IGameService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return GameServiceClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IGameService);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_IGameService,
        }
    }
}
