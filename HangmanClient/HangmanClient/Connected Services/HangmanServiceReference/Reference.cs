//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HangmanServiceReference
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PlayerDTO", Namespace="http://schemas.datacontract.org/2004/07/Hangman_Server.Model")]
    public partial class PlayerDTO : object
    {
        
        private System.Nullable<System.DateTime> BirthdateField;
        
        private string EmailField;
        
        private int IdPlayerField;
        
        private byte[] ImgBytesField;
        
        private string ImgRouteField;
        
        private string NicknameField;
        
        private string PasswordField;
        
        private string PhoneNumberField;
        
        private int ScoreField;
        
        private bool SessionDuplicateField;
        
        private string UsernameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> Birthdate
        {
            get
            {
                return this.BirthdateField;
            }
            set
            {
                this.BirthdateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email
        {
            get
            {
                return this.EmailField;
            }
            set
            {
                this.EmailField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int IdPlayer
        {
            get
            {
                return this.IdPlayerField;
            }
            set
            {
                this.IdPlayerField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] ImgBytes
        {
            get
            {
                return this.ImgBytesField;
            }
            set
            {
                this.ImgBytesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ImgRoute
        {
            get
            {
                return this.ImgRouteField;
            }
            set
            {
                this.ImgRouteField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Nickname
        {
            get
            {
                return this.NicknameField;
            }
            set
            {
                this.NicknameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password
        {
            get
            {
                return this.PasswordField;
            }
            set
            {
                this.PasswordField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PhoneNumber
        {
            get
            {
                return this.PhoneNumberField;
            }
            set
            {
                this.PhoneNumberField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Score
        {
            get
            {
                return this.ScoreField;
            }
            set
            {
                this.ScoreField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool SessionDuplicate
        {
            get
            {
                return this.SessionDuplicateField;
            }
            set
            {
                this.SessionDuplicateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Username
        {
            get
            {
                return this.UsernameField;
            }
            set
            {
                this.UsernameField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PlayerStatsDTO", Namespace="http://schemas.datacontract.org/2004/07/")]
    public partial class PlayerStatsDTO : object
    {
        
        private int GamesPlayedField;
        
        private string UsernameField;
        
        private int WinsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int GamesPlayed
        {
            get
            {
                return this.GamesPlayedField;
            }
            set
            {
                this.GamesPlayedField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Username
        {
            get
            {
                return this.UsernameField;
            }
            set
            {
                this.UsernameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Wins
        {
            get
            {
                return this.WinsField;
            }
            set
            {
                this.WinsField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="HangmanServiceReference.IHangmanService")]
    public interface IHangmanService
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHangmanService/Login", ReplyAction="http://tempuri.org/IHangmanService/LoginResponse")]
        HangmanServiceReference.PlayerDTO Login(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHangmanService/Login", ReplyAction="http://tempuri.org/IHangmanService/LoginResponse")]
        System.Threading.Tasks.Task<HangmanServiceReference.PlayerDTO> LoginAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHangmanService/RegisterPlayer", ReplyAction="http://tempuri.org/IHangmanService/RegisterPlayerResponse")]
        bool RegisterPlayer(HangmanServiceReference.PlayerDTO newPlayer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHangmanService/RegisterPlayer", ReplyAction="http://tempuri.org/IHangmanService/RegisterPlayerResponse")]
        System.Threading.Tasks.Task<bool> RegisterPlayerAsync(HangmanServiceReference.PlayerDTO newPlayer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHangmanService/UpdatePlayerProfile", ReplyAction="http://tempuri.org/IHangmanService/UpdatePlayerProfileResponse")]
        bool UpdatePlayerProfile(HangmanServiceReference.PlayerDTO player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHangmanService/UpdatePlayerProfile", ReplyAction="http://tempuri.org/IHangmanService/UpdatePlayerProfileResponse")]
        System.Threading.Tasks.Task<bool> UpdatePlayerProfileAsync(HangmanServiceReference.PlayerDTO player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHangmanService/GetPlayerStats", ReplyAction="http://tempuri.org/IHangmanService/GetPlayerStatsResponse")]
        HangmanServiceReference.PlayerStatsDTO GetPlayerStats(int playerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHangmanService/GetPlayerStats", ReplyAction="http://tempuri.org/IHangmanService/GetPlayerStatsResponse")]
        System.Threading.Tasks.Task<HangmanServiceReference.PlayerStatsDTO> GetPlayerStatsAsync(int playerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHangmanService/EmailExiste", ReplyAction="http://tempuri.org/IHangmanService/EmailExisteResponse")]
        bool EmailExiste(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHangmanService/EmailExiste", ReplyAction="http://tempuri.org/IHangmanService/EmailExisteResponse")]
        System.Threading.Tasks.Task<bool> EmailExisteAsync(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHangmanService/PhoneNumberExiste", ReplyAction="http://tempuri.org/IHangmanService/PhoneNumberExisteResponse")]
        bool PhoneNumberExiste(string phoneNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHangmanService/PhoneNumberExiste", ReplyAction="http://tempuri.org/IHangmanService/PhoneNumberExisteResponse")]
        System.Threading.Tasks.Task<bool> PhoneNumberExisteAsync(string phoneNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHangmanService/UsernameExiste", ReplyAction="http://tempuri.org/IHangmanService/UsernameExisteResponse")]
        bool UsernameExiste(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHangmanService/UsernameExiste", ReplyAction="http://tempuri.org/IHangmanService/UsernameExisteResponse")]
        System.Threading.Tasks.Task<bool> UsernameExisteAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHangmanService/NicknameExiste", ReplyAction="http://tempuri.org/IHangmanService/NicknameExisteResponse")]
        bool NicknameExiste(string nickname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHangmanService/NicknameExiste", ReplyAction="http://tempuri.org/IHangmanService/NicknameExisteResponse")]
        System.Threading.Tasks.Task<bool> NicknameExisteAsync(string nickname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHangmanService/Logout", ReplyAction="http://tempuri.org/IHangmanService/LogoutResponse")]
        void Logout(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHangmanService/Logout", ReplyAction="http://tempuri.org/IHangmanService/LogoutResponse")]
        System.Threading.Tasks.Task LogoutAsync(string username);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    public interface IHangmanServiceChannel : HangmanServiceReference.IHangmanService, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    public partial class HangmanServiceClient : System.ServiceModel.ClientBase<HangmanServiceReference.IHangmanService>, HangmanServiceReference.IHangmanService
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public HangmanServiceClient() : 
                base(HangmanServiceClient.GetDefaultBinding(), HangmanServiceClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IHangmanService.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public HangmanServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(HangmanServiceClient.GetBindingForEndpoint(endpointConfiguration), HangmanServiceClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public HangmanServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(HangmanServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public HangmanServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(HangmanServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public HangmanServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public HangmanServiceReference.PlayerDTO Login(string username, string password)
        {
            return base.Channel.Login(username, password);
        }
        
        public System.Threading.Tasks.Task<HangmanServiceReference.PlayerDTO> LoginAsync(string username, string password)
        {
            return base.Channel.LoginAsync(username, password);
        }
        
        public bool RegisterPlayer(HangmanServiceReference.PlayerDTO newPlayer)
        {
            return base.Channel.RegisterPlayer(newPlayer);
        }
        
        public System.Threading.Tasks.Task<bool> RegisterPlayerAsync(HangmanServiceReference.PlayerDTO newPlayer)
        {
            return base.Channel.RegisterPlayerAsync(newPlayer);
        }
        
        public bool UpdatePlayerProfile(HangmanServiceReference.PlayerDTO player)
        {
            return base.Channel.UpdatePlayerProfile(player);
        }
        
        public System.Threading.Tasks.Task<bool> UpdatePlayerProfileAsync(HangmanServiceReference.PlayerDTO player)
        {
            return base.Channel.UpdatePlayerProfileAsync(player);
        }
        
        public HangmanServiceReference.PlayerStatsDTO GetPlayerStats(int playerId)
        {
            return base.Channel.GetPlayerStats(playerId);
        }
        
        public System.Threading.Tasks.Task<HangmanServiceReference.PlayerStatsDTO> GetPlayerStatsAsync(int playerId)
        {
            return base.Channel.GetPlayerStatsAsync(playerId);
        }
        
        public bool EmailExiste(string email)
        {
            return base.Channel.EmailExiste(email);
        }
        
        public System.Threading.Tasks.Task<bool> EmailExisteAsync(string email)
        {
            return base.Channel.EmailExisteAsync(email);
        }
        
        public bool PhoneNumberExiste(string phoneNumber)
        {
            return base.Channel.PhoneNumberExiste(phoneNumber);
        }
        
        public System.Threading.Tasks.Task<bool> PhoneNumberExisteAsync(string phoneNumber)
        {
            return base.Channel.PhoneNumberExisteAsync(phoneNumber);
        }
        
        public bool UsernameExiste(string username)
        {
            return base.Channel.UsernameExiste(username);
        }
        
        public System.Threading.Tasks.Task<bool> UsernameExisteAsync(string username)
        {
            return base.Channel.UsernameExisteAsync(username);
        }
        
        public bool NicknameExiste(string nickname)
        {
            return base.Channel.NicknameExiste(nickname);
        }
        
        public System.Threading.Tasks.Task<bool> NicknameExisteAsync(string nickname)
        {
            return base.Channel.NicknameExisteAsync(nickname);
        }
        
        public void Logout(string username)
        {
            base.Channel.Logout(username);
        }
        
        public System.Threading.Tasks.Task LogoutAsync(string username)
        {
            return base.Channel.LogoutAsync(username);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IHangmanService))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IHangmanService))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:64520/HangmanService.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return HangmanServiceClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IHangmanService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return HangmanServiceClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IHangmanService);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_IHangmanService,
        }
    }
}
